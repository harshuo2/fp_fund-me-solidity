{
  "address": "0x5E2661B765E9e70B8687f5f0b12088e570AD7def",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1eaf04f7581209c0069cd6594d57d796b98b150a12a1a9f03dd7fd5ffd9228ab",
  "receipt": {
    "to": null,
    "from": "0x7cec7Ba9017F28D05912BC2e205cb21b8471d1b7",
    "contractAddress": "0x5E2661B765E9e70B8687f5f0b12088e570AD7def",
    "transactionIndex": 4,
    "gasUsed": "573640",
    "logsBloom": "0x
    "blockHash": "0x17dc789ee19fb5e7b042426fb864ea969b5710026004a8e44e75fba206bcfdda",
    "transactionHash": "0x1eaf04f7581209c0069cd6594d57d796b98b150a12a1a9f03dd7fd5ffd9228ab",
    "logs": [],
    "blockNumber": 10931444,
    "cumulativeGasUsed": "1226286",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "817582a840d69ef515afc040e9e3750b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins   // name of author\",\"details\":\"This implements price feeds as our library  // note for devs.\",\"methods\":{},\"title\":\"A sample Funding Contract   // what this contract is\"},\"userdoc\":{\"methods\":{\"constructor\":\"/ constructor / receive / fallback / external / public / internal / private / view / pure\",\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"}},\"notice\":\"This contract is for creating a sample funding contract  // a note to the people(imporves readability)\"}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x8895ce4f46aba18ee3cdb7b1d180f79edb868225781f60993c7b2181e2ee2583\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity 0.6.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n//import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\\\";\\nimport \\\"./PriceConvertor.sol\\\";\\n\\n// 3. Interfaces, Libraries, errors, Contracts\\n// Error should be written as <ContractName>__<name of error>\\n// error FundMe__NotOwner(); // this shit is too advanced for our solidity version\\n\\n/**@title A sample Funding Contract   // what this contract is\\n * @author Patrick Collins   // name of author\\n * @notice This contract is for creating a sample funding contract  // a note to the people(imporves readability)\\n * @dev This implements price feeds as our library  // note for devs.\\n */\\ncontract FundMe {\\n  // Type Declarations\\n  using SafeMathChainlink for uint256;\\n  using PriceConvertor for uint256; // ab iss var type (uint256) ke saare instance aise treat honge ki agar koi\\n  // var ka use ho, to isko as parameter ki jagah, func ko iska func maan ke use kar sakte hain\\n  // State variables\\n  mapping(address => uint256) private addressToAmountFunded;\\n  address payable private owner;\\n  address[] private funders;\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n  AggregatorV3Interface private priceFeed; // this gives us the abi. abi along with address gives us a contract to interact with\\n\\n  // jo uske type ka wahi na value store karega. isliye AggregatorV3Interface ke type ka var banaya hai\\n  // Events (we have none!)\\n\\n  // Modifiers\\n  modifier checkOwner() {\\n    require(msg.sender == owner, \\\"You're not the owner! Stop\\\");\\n    //if (msg.sender != owner) revert FundMe__NotOwner(); // do this if error can be written at the top\\n    _;\\n  }\\n\\n  // Functions Order:\\n  //// constructor\\n  //// receive\\n  //// fallback\\n  //// external\\n  //// public\\n  //// internal\\n  //// private\\n  //// view / pure\\n\\n  constructor(address priceFeedAddress) public {\\n    // ek baar jo value construcor mein def hojaye, usko kisi ka baap nahi badal sakta\\n    owner = msg.sender;\\n    priceFeed = AggregatorV3Interface(priceFeedAddress); // by passing the address, a contract is not created.\\n  }\\n\\n  /// @notice Funds our contract based on the ETH/USD price\\n  function fund() public payable {\\n    addressToAmountFunded[msg.sender] += msg.value; //+ add karna hai\\n    require(\\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n      \\\"Aur paisa do madarchod\\\"\\n    );\\n    funders.push(msg.sender);\\n  }\\n\\n  function withdraw() public payable checkOwner {\\n    owner.transfer(address(this).balance);\\n    for (\\n      uint256 fundersIndex = 0;\\n      fundersIndex < funders.length;\\n      fundersIndex++\\n    ) {\\n      address funder = funders[fundersIndex];\\n      addressToAmountFunded[funder] = 0;\\n    }\\n    funders = new address[](0);\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return (addressToAmountFunded[funder]);\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return owner;\\n  }\\n\\n  function getFunders(uint256 index) public view returns (address) {\\n    return funders[index];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return priceFeed;\\n  }\\n}\\n// FOR FUNCTIONS IN PRICECONVERTOR.sol\\n/** @notice Gets the amount that an address has funded\\n *  @param fundingAddress the address of the funder\\n *  @return the amount funded\\n */\\n// recieve aur fallback do special functions hain. one is called if no data is passed through 'transact'-> lower level\\n// this is recieve(). Fallback is called if some value is passed which is not required by any functions.\\n\",\"keccak256\":\"0x96d80e8e1d72c0081fc0c7c0cd011426b6f9b56b619a91d91249cc154a4474cb\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor {\\n  // libraries cannot have constant state variables\\n\\n  function getVersion() public view returns (uint256) {\\n    AggregatorV3Interface latestPrice = AggregatorV3Interface(\\n      0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    );\\n    return latestPrice.version();\\n  }\\n\\n  function getLatestPrice(AggregatorV3Interface latestPrice)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // AggregatorV3Interface latestPrice = AggregatorV3Interface(\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // );\\n    (, int256 answer, , , ) = latestPrice.latestRoundData();\\n    return uint256(answer);\\n  }\\n\\n  function getConversionRate(\\n    uint256 ethAmounts,\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    //this ethAmounts is a value this func\\n    // needs to run. Ye number hum input karenge\\n    uint256 ethPriceInUSD = getLatestPrice(priceFeed);\\n    uint256 ethAmountInUSD = ethAmounts * ethPriceInUSD;\\n    return ethAmountInUSD / 10**8;\\n  }\\n}\\n\",\"keccak256\":\"0x902383d04d42e1e4999a97b68aca1ede282b6e3f3832dfa23eca489eba1d0124\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109683803806109688339818101604052602081101561003357600080fd5b810190808051906020019092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610892806100d66000396000f3fe6080604052600436106100705760003560e01c80636b69a5921161004e5780636b69a5921461015f578063893d20e81461018a5780639e87a5cd146101e1578063b60d42881461023857610070565b80630343fb25146100755780633a7b6c74146100da5780633ccfd60b14610155575b600080fd5b34801561008157600080fd5b506100c46004803603602081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610242565b6040518082815260200191505060405180910390f35b3480156100e657600080fd5b50610113600480360360208110156100fd57600080fd5b810190808035906020019092919050505061028a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61015d6102cb565b005b34801561016b57600080fd5b506101746104e2565b6040518082815260200191505060405180910390f35b34801561019657600080fd5b5061019f6104ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ed57600080fd5b506101f6610519565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610240610543565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006002828154811061029957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f596f75277265206e6f7420746865206f776e6572212053746f7000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103f6573d6000803e3d6000fd5b5060008090505b6002805490508110156104985760006002828154811061041957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506103fd565b5060006040519080825280602002602001820160405280156104c95781602001602082028038833980820191505090505b50600290805190602001906104df92919061078f565b50565b6802b5e3af16b188000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506802b5e3af16b18800006105ce600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a790919063ffffffff16565b1015610642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f41757220706169736120646f206d6164617263686f640000000000000000000081525060200191505060405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806106b3836106d4565b9050600081850290506305f5e10081816106c957fe5b049250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561071d57600080fd5b505afa158015610731573d6000803e3d6000fd5b505050506040513d60a081101561074757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505080915050919050565b828054828255906000526020600020908101928215610808579160200282015b828111156108075782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107af565b5b5090506108159190610819565b5090565b61085991905b8082111561085557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161081f565b5090565b9056fea26469706673582212200cf4b51926fc426a01ce20d34892d23b1c922a779fa91b8cda2bd45b0e0f254264736f6c63430006000033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80636b69a5921161004e5780636b69a5921461015f578063893d20e81461018a5780639e87a5cd146101e1578063b60d42881461023857610070565b80630343fb25146100755780633a7b6c74146100da5780633ccfd60b14610155575b600080fd5b34801561008157600080fd5b506100c46004803603602081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610242565b6040518082815260200191505060405180910390f35b3480156100e657600080fd5b50610113600480360360208110156100fd57600080fd5b810190808035906020019092919050505061028a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61015d6102cb565b005b34801561016b57600080fd5b506101746104e2565b6040518082815260200191505060405180910390f35b34801561019657600080fd5b5061019f6104ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ed57600080fd5b506101f6610519565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610240610543565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006002828154811061029957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f596f75277265206e6f7420746865206f776e6572212053746f7000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103f6573d6000803e3d6000fd5b5060008090505b6002805490508110156104985760006002828154811061041957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506103fd565b5060006040519080825280602002602001820160405280156104c95781602001602082028038833980820191505090505b50600290805190602001906104df92919061078f565b50565b6802b5e3af16b188000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506802b5e3af16b18800006105ce600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a790919063ffffffff16565b1015610642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f41757220706169736120646f206d6164617263686f640000000000000000000081525060200191505060405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806106b3836106d4565b9050600081850290506305f5e10081816106c957fe5b049250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561071d57600080fd5b505afa158015610731573d6000803e3d6000fd5b505050506040513d60a081101561074757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505080915050919050565b828054828255906000526020600020908101928215610808579160200282015b828111156108075782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107af565b5b5090506108159190610819565b5090565b61085991905b8082111561085557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161081f565b5090565b9056fea26469706673582212200cf4b51926fc426a01ce20d34892d23b1c922a779fa91b8cda2bd45b0e0f254264736f6c63430006000033",
  "devdoc": {
    "author": "Patrick Collins   // name of author",
    "details": "This implements price feeds as our library  // note for devs.",
    "methods": {},
    "title": "A sample Funding Contract   // what this contract is"
  },
  "userdoc": {
    "methods": {
      "constructor": "/ constructor / receive / fallback / external / public / internal / private / view / pure",
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      }
    },
    "notice": "This contract is for creating a sample funding contract  // a note to the people(imporves readability)"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 195,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 198,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 207,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}